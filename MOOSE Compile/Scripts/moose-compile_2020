#!/bin/bash -x

#-SBATCH --partition=SandyBridgePriority
#SBATCH --partition=general_requeue
#SBATCH --nodes=1
#SBATCH --ntasks=16
#SBATCH -o moose-compile.out
#SBATCH -e moose-compile.out

# Fail on first error!
#set -e
# ^ This might be too strict?

echo > moose-compile.out

source /apps2/Modules/default/init/bash


module purge 
module load tcl/8.6.6.8606 sqlite/3.18.0 zlib/1.2.11 openssl/1.0.2o libcurl/7.60.0 gcc/5.4.0-alt git/2.7.2 mpi/openmpi/1.10.3 cuda/7.5 python/3.7.3 petsc/3.8.4-gcc-mpi libxml2/2.9.3-gcc boost/1.61.0-gcc-mpi hdf5/1.8.12 petsc/3.8.4-gcc-mpi hwloc/5.6.1 

if ! [[ -d moose/ ]]; then
    git clone https://github.com/idaholab/moose.git
    cd moose/
    rm -r libmesh/
    git clone https://github.com/libMesh/libmesh.git
    pushd libmesh/contrib
    rm -r metaphysicl/
    git clone https://github.com/roystgnr/MetaPhysicL.git
    popd
    git submodule update --init --recursive
fi

export \
    CPPFLAGS=$(echo "-I${INCLUDE//:/ -I}") -g \
    LDFLAGS=$(echo "-L${LD_LIBRARY_PATH//:/ -L}") \
#    MOOSE_JOBS=1 \
    MOOSE_JOBS=$SLURM_CPUS_ON_NODE \
    BOOST_ROOT=/apps2/boost/1.61.0-gcc-mpi \
    HDF5_DIR=/apps2/hdf5/1.8.12 \
    PETSC_DIR=/apps2/petsc/3.8.4-gcc-mpi

# exodiff fails to run because it's searching for C++ libraries on the
# system instead of using GCC 5.4.0.  Work around this by setting the
# rpath.  Added CFLAGS and CXXFLAGS.
export \
    CC=mpicc \
    CXX=mpicxx \
    EXTERNAL_FLAGS=-Wl,-rpath,/apps2/gcc/5.4.0-alt/lib64 \
    FC=mpif90 \
    F90=mpif90 \
    F77=mpif77

/shared/sergelab/Spring2020/projects/moose/scripts/update_and_rebuild_libmesh.sh

cd /shared/sergelab/Spring2020/projects/moose/test
make --jobs=16
./run_tests -j 16
