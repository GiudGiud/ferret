#!python
#!/usr/bin/env python2.5

import os, sys, math
# MAC Path
sys.path.append('/Applications/Cubit-12.2/Cubit.app/Contents/MacOS')
if os.environ.has_key('CUBIT_HOME'):
  cubit_home = os.environ['CUBIT_HOME']
  sys.path.append(cubit_home + '/bin')
import cubit

os.chdir('/Users/nakhmanson/Work/Projects/Current/Models/Mesoscale/Seungbum_cantilevers')

cubit.cmd('reset')

n = 6

# This scale is used for meshing
scale = 1.0

# Cantilever dimensions [um]:
cantilever_length = 220.0 
cantilever_width = 20.0 
cantilever_thickness = 2.0 

# Cantilever weight dimensions [um]:
weight_length = [30.0, 60.0, 100.0, 140.0, 180.0, 200.0] 
weight_width =  [20.0, 20.0, 20.0, 20.0, 20.0, 20.0]
weight_thickness = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

cantilever_weight_attached = [True, True, True, True, True, True]

cantilever_name_base = 'cantilever_'
cantilever_name = ['2F', '2E', '2D', '2C', '2B', '2A']

for i in range(0,n):
    #
    cubit.cmd('reset')
    #
    # Generate brick 1 (cantilever):
    cubit.cmd('brick x ' + str(scale*(cantilever_length - weight_length[i])) + ' y ' + str(scale*cantilever_width) + ' z ' + str(scale*cantilever_thickness))
    #
    # Generate the brick for the cantilever weight and merge it with the first one
    if cantilever_weight_attached[i] == True:
        cubit.cmd('brick x ' + str(scale*weight_length[i]) + ' y ' + str(scale*weight_width[i]) + ' z ' + str(scale*(cantilever_thickness + weight_thickness[i])))
        cubit.cmd('align volume 1 surface 1 with surface 7')
        weight_shift = scale*(cantilever_length/2.00)
        cubit.cmd('volume 2 move x ' + str(weight_shift))
        #
        #cubit.cmd('brick x ' + str(scale*weight_length[i]) + ' y ' + str(scale*weight_width[i]) + ' z ' + str(scale*(weight_thickness[i])))
        #weight_shift = scale*(cantilever_length/2.00)
        #cubit.cmd('volume 3 move x ' + str(weight_shift))
        #weight_shift = -scale*(cantilever_thickness/2.00 + weight_thickness[i]/2.00)
        #cubit.cmd('volume 3 move z ' + str(weight_shift))
        #
        cubit.cmd('split surface 10 across location vertex 5 6')
        cubit.cmd('merge vertex all with vertex all')
        cubit.cmd('merge curve all with curve all')
        cubit.cmd('merge surface all with surface all')
        #
    cubit.cmd('compress all')
    #
    cubit.cmd('volume all size 1')
    #cubit.cmd('volume all scheme Tetmesh')
    cubit.cmd('mesh volume all')
    #
    surface_id_list = cubit.get_entities( "surface" )
    #
    count = 0
    for id in surface_id_list:
        count = count + 1
        cubit.cmd('Sideset ' + str(count) + '  surface  ' + str(id))
    #
    volume_id_list = cubit.get_entities( "volume" )
    #
    count = 0
    for id in volume_id_list:
        count = count + 1
        cubit.cmd('block ' + str(count) + '  volume  ' + str(id))
    cubit.cmd('block all element type HEX8')
    #
    s = cantilever_name_base + cantilever_name[i] 
    cubit.cmd('save as "./' + s + '_dam.cub" overwrite')
    cubit.cmd('set large exodus file off')
    cubit.cmd('export Genesis  "./' + s + '_dam.e" dimension 3 overwrite')









