#!python
#!/usr/bin/env python2.5

import os, sys, math
# MAC Path
sys.path.append('/Applications/Cubit-12.2/Cubit.app/Contents/MacOS')
if os.environ.has_key('CUBIT_HOME'):
  cubit_home = os.environ['CUBIT_HOME']
  sys.path.append(cubit_home + '/bin')
import cubit

 

os.chdir('/Users/nakhmanson/Work/Projects/Current/Models/Mesoscale/Grain_Models/example_20x20x30_10grains')

def stringlist(start, end, skip_list=[]):
  #Generates a list including the end item!
  return ' '.join([str(i) for i in xrange(start, end+1) if i not in skip_list])

cubit.cmd('reset')

number_of_cell = 10

f3 = open('voro_edge_number_of_face.dat', 'r')
f7 = open('voro_coordinate_of_vertex_in_each_cell.dat', 'r')
f6 = open('voro_number_of_vertex_in_each_cell.dat', 'r')
f5 = open('voro_number_of_faces.dat','r')
f4 = open('voro_vertex_id_of_face.dat','r')

f = open('./ferret_grain_geometry_list.out', 'w')

Dataxyzline = []
Data = []
for line in f7:
    Dataxyzline = line.split(' ')
    for i in range(0,len(Dataxyzline)):
        Dataxyzline[i] = eval(Dataxyzline[i])
    Data.append(Dataxyzline)
        
number_of_vertex = []        
for line in f6:
    Dataxyzline = line
    Dataxyzline = eval(Dataxyzline)
    number_of_vertex.append(Dataxyzline)

number_of_edges_on_face = []
for line in f3:
    Dataxyzline = line.split(' ')
    for i in range(0,len(Dataxyzline)):
        Dataxyzline[i] = eval(Dataxyzline[i])
    number_of_edges_on_face.append(Dataxyzline)
        
        
number_of_faces = []        
for line in f5:
    Dataxyzline = line
    Dataxyzline = eval(Dataxyzline)
    number_of_faces.append(Dataxyzline)


vertex_id_on_face = []
for line in f4:
    Dataxyzline = line.split(' ')
    for i in range(0,len(Dataxyzline)):
        Dataxyzline[i] = eval(Dataxyzline[i])
    vertex_id_on_face.append(Dataxyzline)


curve_id = 0
curve_id_start = 0

surface_id = 0
surface_id_start = 0


for cell in range(0,number_of_cell):
    surface_id_start = surface_id + 1
    for face in range(0,number_of_faces[cell]):
        curve_id_start = curve_id + 1
        for vertex in range(0, len(vertex_id_on_face[cell][face])):
            if vertex < len(vertex_id_on_face[cell][face])-1:
                id1 = vertex_id_on_face[cell][face][vertex]
                id2 = vertex_id_on_face[cell][face][vertex+1]
                cubit.cmd( 'create curve location  ' + str(Data[cell][id1][0]) + '  ' + str(Data[cell][id1][1]) + '  ' + str(Data[cell][id1][2]) + ' location ' + str(Data[cell][id2][0]) + '  ' + str(Data[cell][id2][1]) + '  ' + str(Data[cell][id2][2]) )
                curve_id = curve_id + 1
            else:
                id1 = vertex_id_on_face[cell][face][vertex]
                id2 = vertex_id_on_face[cell][face][0]
                cubit.cmd( 'create curve location ' + str(Data[cell][id1][0]) + '  ' + str(Data[cell][id1][1]) + '  ' + str(Data[cell][id1][2]) + ' location ' + str(Data[cell][id2][0]) + '  ' + str(Data[cell][id2][1]) + '  ' + str(Data[cell][id2][2]) )
                curve_id = curve_id + 1              
        curve_id_end = curve_id
        cubit.cmd( 'create surface curve ' + stringlist(curve_id_start, curve_id_end) )
        surface_id = surface_id + 1
    surface_id_end = surface_id
    cubit.cmd( 'create volume surface ' + stringlist(surface_id_start, surface_id_end) )

cubit.cmd( 'merge vertex all with vertex all')
cubit.cmd( 'merge curve all with curve all')
cubit.cmd( 'merge surface all with surface all')
cubit.cmd( 'compress all')
#cubit.cmd('create Cylinder height 18 radius 6')
#cubit.cmd('intersect volume all')
#cubit.cmd( 'merge vertex all with vertex all')
#cubit.cmd( 'merge curve all with curve all')
#cubit.cmd( 'merge surface all with surface all')
#cubit.cmd( 'compress all')


cubit.cmd('volume all size 2')
cubit.cmd('volume all scheme Tetmesh')
cubit.cmd('mesh volume all')


# The code below is specific to rectangular boxes and their sides/normals.
# Different surface normal sorting procedure needs to be used for more complicated shapes.

# Six sides total for a rectangular box. Number of BC is 3x this number:
surface_bc_number = 6

# Array values entries for surfaces are ordered by their normals, same as in norm_direct_list below 
# ['(1,0,0)', '(-1,0,0)', '(0,1,0)', '(0,-1,0)', '(0,0,1)', '(0,0,-1)']

# names of the BC blocks:
bc_name_template = 'anchor'
bc_name_list_X = []
bc_name_list_Y = []
bc_name_list_Z = []
for i in range(1,surface_bc_number + 1):
    bc_name_list_X.append(bc_name_template + str(i) + '_X')
    bc_name_list_Y.append(bc_name_template + str(i) + '_Y')
    bc_name_list_Z.append(bc_name_template + str(i) + '_Z')

# BC type [DirichletBC, NeumannBC, etc]:
bc_type_X = ['DirichletBC']
bc_type_X_repeat = True
bc_type_Y = ['DirichletBC']
bc_type_Y_repeat = True
bc_type_Z = ['DirichletBC']
bc_type_Z_repeat = True

# BC printable?
bc_print_X = [False, False, False, False, True, True]
bc_print_Y = [False, False, False, False, True, True]
bc_print_Z = [False, False, False, False, True, True]

# BC active?
bc_active_X = [False, False, False, False, False, False]
bc_active_Y = [False, False, False, False, False, False]
bc_active_Z = [False, False, False, False, True, True]
active_bc_line = []
for i in range(0,surface_bc_number):
    if bc_active_X[i] == True:
        active_bc_line.append( bc_name_list_X[i] )
    if bc_active_Y[i] == True:
        active_bc_line.append( bc_name_list_Y[i] )
    if bc_active_Z[i] == True:
        active_bc_line.append( bc_name_list_Z[i] )

# PDE variable names
bc_var_X = ['disp_x']
bc_var_Y = ['disp_y']
bc_var_Z = ['disp_z']
bc_var_repeat = True

# Variable value at the boundary
bc_value_X = ['0.0']
bc_value_X_repeat = True
bc_value_Y = ['0.0']
bc_value_Y_repeat = True
bc_value_Z = ['0.0', '0.0', '0.0', '0.0', '3e-6', '-3e-6']
bc_value_Z_repeat = False


# Number of surfaces that need BC setup (could be active or inactive in MOOSE input)

surface_id_list = cubit.get_entities( "surface" )

count = 0
for id in surface_id_list:
    count = count + 1
    cubit.cmd('Sideset ' + str(count) + '  surface  ' + str(id))

surf_list_norm_up_x = []
surf_list_norm_up_y = []
surf_list_norm_up_z = []
surf_list_norm_dn_x = []
surf_list_norm_dn_y = []
surf_list_norm_dn_z = []
internal_surf_list = []

surf_list_norm = [surf_list_norm_up_x, surf_list_norm_dn_x, surf_list_norm_up_y, surf_list_norm_dn_y, surf_list_norm_up_z, surf_list_norm_dn_z]
norm_direct_list = ['(1,0,0)', '(-1,0,0)', '(0,1,0)', '(0,-1,0)', '(0,0,1)', '(0,0,-1)']

skin = ''

for id in surface_id_list:
    norm = cubit.get_surface_normal(id)
    v = cubit.get_relatives("surface", id, "volume")
    s = 'Surface ' + str(id) + ': Normal - ' + str(norm) + ' Owner volume(s): ' + str(v) + '\n'
    f.write(s)
    if len(v) > 1:
        internal_surf_list.append(id)
        f.write('Surface ' + str(id) + ' seems to be internal. Skipping.\n')
        continue
    else:
        f.write('Processing external surface ' + str(id) + ' ... ')
        if norm[0] == 1:
            surf_list_norm_up_x.append(id)
            f.write('Normal direction is (1,0,0)\n')
        elif norm[0] == -1:
            surf_list_norm_dn_x.append(id)
            f.write('Normal direction is (-1,0,0)\n')
        elif norm[1] == 1:
            surf_list_norm_up_y.append(id)
            f.write('Normal direction is (0,1,0)\n')
        elif norm[1] == -1:
            surf_list_norm_dn_y.append(id)
            f.write('Normal direction is (0,-1,0)\n')
        elif norm[2] == 1:
            surf_list_norm_up_z.append(id)
            f.write('Normal direction is (0,0,1)\n')
        elif norm[2] == -1:
            surf_list_norm_dn_z.append(id)
            f.write('Normal direction is (0,0,-1)\n')


for id in range(0,len(surf_list_norm)):
    s = ''
    count = count + 1
    s1 = 'Surfaces with ' + str(norm_direct_list[id]) + ' normal: '
    for i in range(0,len(surf_list_norm[id])):
        s = s + str(surf_list_norm[id][i]) + '  '
    s1 = s1 + s + '\n'
    f.write(s1)
    s1 = 'Sideset ' + str(count) + ' surface  ' + s
    skin = skin + s
    cubit.cmd(s1)

count = count + 1
f.write('Skin of the box: ' + skin + '\n')
s7 = 'Sideset ' + str(count) + ' surface  ' + skin
cubit.cmd(s7)

s = ''
s8 = 'Internal surfaces: '
for i in range(0,len(internal_surf_list)):
    s = s + str(internal_surf_list[i]) + '  '
s8 = s8 + s + '\n'
f.write(s8)

f.close()


fbc = open('./ferret_input_bc_block.out', 'w')

sideset_count = len(surface_id_list) + 1
counter = 0

fbc.write('[BCs]\n\n')

if len(active_bc_line) > 0:
    fbc.write('  active = \'')
    for j in range(0,len(active_bc_line) - 1):
        fbc.write(active_bc_line[j] + ' ')
    fbc.write(active_bc_line[len(active_bc_line) - 1] + '\'\n\n')

for i in range(0,surface_bc_number):
#
    fbc.write('  #  Box side with the ' + str(norm_direct_list[i]) + ' normal: \n\n')
#
    if bc_print_X[i] == True:
        fbc.write('  [./' + bc_name_list_X[i] + ']\n')
        if bc_type_X_repeat == True:
            fbc.write('    type = ' + bc_type_X[0] + '\n')
        else:
            fbc.write('    type = ' + bc_type_X[i] + '\n')
        if bc_var_repeat == True:
            fbc.write('    variable = ' + bc_var_X[0] + '\n')
        else:
            fbc.write('    variable = ' + bc_var_X[i] + '\n')
        fbc.write('    boundary = \'' + str(sideset_count) + '\'\n')
        if bc_value_X_repeat == True:
            fbc.write('    value = ' + bc_value_X[0] + '\n')
        else:
            fbc.write('    value = ' + bc_value_X[i] + '\n')
        fbc.write('  [../]\n\n')
#
    if bc_print_Y[i] == True:
        fbc.write('  [./' + bc_name_list_Y[i] + ']\n')
        if bc_type_Y_repeat == True:
            fbc.write('    type = ' + bc_type_Y[0] + '\n')
        else:
            fbc.write('    type = ' + bc_type_Y[i] + '\n')
        if bc_var_repeat == True:
            fbc.write('    variable = ' + bc_var_Y[0] + '\n')
        else:
            fbc.write('    variable = ' + bc_var_Y[i] + '\n')
        fbc.write('    boundary = \'' + str(sideset_count) + '\'\n')
        if bc_value_Y_repeat == True:
            fbc.write('    value = ' + bc_value_Y[0] + '\n')
        else:
            fbc.write('    value = ' + bc_value_Y[i] + '\n')
        fbc.write('  [../]\n\n')
#
    if bc_print_Z[i] == True:
        fbc.write('  [./' + bc_name_list_Z[i] + ']\n')
        if bc_type_Z_repeat == True:
            fbc.write('    type = ' + bc_type_Z[0] + '\n')
        else:
            fbc.write('    type = ' + bc_type_Z[i] + '\n')
        if bc_var_repeat == True:
            fbc.write('    variable = ' + bc_var_Z[0] + '\n')
        else:
            fbc.write('    variable = ' + bc_var_Z[i] + '\n')
        fbc.write('    boundary = \'' + str(sideset_count) + '\'\n')
        if bc_value_Z_repeat == True:
            fbc.write('    value = ' + bc_value_Z[0] + '\n')
        else:
            fbc.write('    value = ' + bc_value_Z[i] + '\n')
        fbc.write('  [../]\n\n')
#
    sideset_count = sideset_count + 1

fbc.write('[] # BCs\n\n')


fbc.close()



volume_id_list = cubit.get_entities( "volume" )

count = 0
for id in volume_id_list:
    count = count + 1
    cubit.cmd('block ' + str(count) + '  volume  ' + str(id))


cubit.cmd('block all element type tetra4')


# Contents of "Materials" block in MOOSE input. Set up crudely so far.

# get the number of volume blocks
mb_number = len(volume_id_list)

# names of the material blocks:
mb_name_template = 'grain'
mb_name_list = []
for i in range(1,mb_number + 1):
    mb_name_list.append(mb_name_template + str(i))

# ELK class describing the material:
mb_type = ['LinearElasticMaterial']
mb_type_repeat = True

# PDE variable names
mb_var_x = ['disp_x']
mb_var_y = ['disp_y']
mb_var_z = ['disp_z']
mb_var_repeat = True

# Elastic const tensor
mb_Cijkl21 = ['false']
mb_Cijkl21_repeat = True

# reading     C_11  C_12  C_13  C_22  C_23  C_33  C_44  C_55  C_66
# Cubic
#mb_Cijkl = ['1.0e6 0.5e6 0.5e6 1.0e6 0.5e6 1.0e6 0.5e6 0.5e6 0.5e6']
# Tetragonal
mb_Cijkl = ['1.0e6 0.5e6 0.5e6 1.0e6 0.5e6 6.0e6 0.5e6 0.5e6 1.5e6']
# Isotropic
# mb_Cijkl = ['1.0e6 0.5e6 0.5e6 1.0e6 0.5e6 1.0e6 0.25e6 0.25e6 0.25e6']
mb_Cijkl_repeat = True

# Euler angles for rotating Cijkl; includes various procedures to generate them on the spot:
crystallographic_angles_90 = [0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0]
crystallographic_angles_180 = [0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0, 105.0, 120.0, 135.0, 150.0, 165.0, 180.0]
generate_crystallographic_angles = False
generate_random_angles = False
mb_euler_angle_custom = False
mb_euler_angle_repeat = False

generate_gauss_angles = True
gauss_angle_mean_1 = 0.0
gauss_angle_spread_1 = 4.0
gauss_angle_mean_2 = 0.0
gauss_angle_spread_2 = 4.0
gauss_angle_mean_3 = 0.0
gauss_angle_spread_3 = 4.0

generate_planar_angles = False

mb_euler_angle_1 = []
mb_euler_angle_2 = []
mb_euler_angle_3 = []

if generate_crystallographic_angles == True:
    for i in range(1,mb_number + 1):
        mb_euler_angle_1.append( random.choice(crystallographic_angles_180) * random.randrange(-1, 3, 2) )
        mb_euler_angle_2.append( random.choice(crystallographic_angles_90) * random.randrange(-1, 3, 2) )
        mb_euler_angle_3.append( random.choice(crystallographic_angles_180) * random.randrange(-1, 3, 2) )
elif generate_random_angles == True:
    for i in range(1,mb_number + 1):
        mb_euler_angle_1.append( random.uniform(-180.0, 180.0) )
        mb_euler_angle_2.append( random.uniform(-90.0, 90.0) )
        mb_euler_angle_3.append( random.uniform(-180.0, 180.0) )
elif generate_gauss_angles == True:
    for i in range(1,mb_number + 1):
        mb_euler_angle_1.append( random.gauss(gauss_angle_mean_1, gauss_angle_spread_1) )
        mb_euler_angle_2.append( random.gauss(gauss_angle_mean_2, gauss_angle_spread_2) )
        mb_euler_angle_3.append( random.gauss(gauss_angle_mean_3, gauss_angle_spread_3) )
elif mb_euler_angle_custom == True:
# If we are not using random method to assign angles, we'll need to fill out these arrays by hand:
    mb_euler_angle_1 = [0.0]
    mb_euler_angle_2 = [0.0]
    mb_euler_angle_3 = [0.0]
else:
    print 'Error: Unknown procedure for grain Euler angles assignment!'
    cubit.cmd('stop')   

if generate_planar_angles == True:
    for i in range(0,mb_number):
        mb_euler_angle_2[i] = 0.0
        mb_euler_angle_3[i] = 0.0

fmb = open('./ferret_input_materials_block.out', 'w')

counter = 0

fmb.write('[Materials]\n\n')

for id in volume_id_list:
    fmb.write('  [./' + mb_name_list[counter] + ']\n')
    if mb_type_repeat == True:
        fmb.write('    type = ' + mb_type[0] + '\n')
    else:
        fmb.write('    type = ' + mb_type[counter] + '\n')
    fmb.write('    block = \'' + str(id) + '\'\n')
    if mb_var_repeat == True:
        fmb.write('    disp_x = ' + mb_var_x[0] + '\n')
        fmb.write('    disp_y = ' + mb_var_y[0] + '\n')
        fmb.write('    disp_z = ' + mb_var_z[0] + '\n\n')
    else:
        fmb.write('    disp_x = ' + mb_var_x[counter] + '\n')
        fmb.write('    disp_y = ' + mb_var_y[counter] + '\n')
        fmb.write('    disp_z = ' + mb_var_z[counter] + '\n\n')
    if mb_Cijkl21_repeat == True:
        fmb.write('    all_21 = ' + mb_Cijkl21[0] + '\n')
    else:
        fmb.write('    all_21 = ' + mb_Cijkl21[counter] + '\n')
    if mb_Cijkl_repeat == True:
        fmb.write('    C_ijkl = \'' + mb_Cijkl[0] + '\'\n\n')
    else:
        fmb.write('    C_ijkl = \'' + mb_Cijkl[counter] + '\'\n\n')
    if mb_euler_angle_repeat == True:
        fmb.write('    euler_angle_1 = ' + str(mb_euler_angle_1[0]) + '\n')
        fmb.write('    euler_angle_2 = ' + str(mb_euler_angle_2[0]) + '\n')
        fmb.write('    euler_angle_3 = ' + str(mb_euler_angle_3[0]) + '\n')
    else:
        fmb.write('    euler_angle_1 = ' + str(mb_euler_angle_1[counter]) + '\n')
        fmb.write('    euler_angle_2 = ' + str(mb_euler_angle_2[counter]) + '\n')
        fmb.write('    euler_angle_3 = ' + str(mb_euler_angle_3[counter]) + '\n')
    fmb.write('  [../]\n\n')
    counter = counter + 1

fmb.write('[] # Materials\n\n')

fmb.close()




cubit.cmd('set large exodus file off')
cubit.cmd('export Genesis  "./ferret_grains_exodus.e" dimension 3 block all overwrite')

























