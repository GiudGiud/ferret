================================================================================================================================================================================================
sbrick:
================================================================================================================================================================================================
This test stretches a cube vertically. The top and bottom surfaces are forced to maintain 
their shape by prescribing zero X and Y displacements, hence, it is clamped in XY, or laterally.
The mesh here is small, facilitating direct examination of the resulting vectors and matrices.
Whenever a matrix is formed, we use -pc_type svd.  For a matrix-free  matrix -pc_type none is used, 
where appropriate.

Cases:
----------
In tensor_mechanics/dirichlet the following cases were run:
sbrick.i,          which uses the analytic Jacobian both as J and P:                                                                                             [J,J]:              line search divergence
sbrick_mf.i, which uses the matrix free Jacobian as J and no P                                                                                            [Jmffd, 0]: convergence, correct-looking result
sbrick_mfo.i, which uses the finite-difference matrix-free Jacobian as J and the anlytic Jacobian as P:    [Jmffd,J]:  convergence with struggling KSP (note that SVD(J) is the preconditioner), correct-looking result
sbrick_fdp.i,  which uses the finite-difference assembled Jacobian both for J and P via Moose:                    [Jfd,Jfd]:    line search divergence

Preliminary Conclusions: 
-----------------------------------------
Cases sbrick.i, sbrick_mf.i and sbrick_mfo.i support the following theory: residual R is correct but the analytic Jacobian J is inconsistent with it.
Indeed, 
in sbrick.i solving the linear system Ju = -R results in no improvement to R
in sbrick_mf.i the linear system Jmffd u = -R provides a good update to R (although the linear convergence is very slow -- since -pc_type none),
in sbrick_mfo.i the linear system Jmffd u = -R is preconditioned using J, which is inconsistent with J and, hence, Jmffd, and which explains why 
   the "exact" preconditioner SVD(J) doesn't help Jmffd enough; yet the linear system itself is consistent with R.

Note also that the lowest singular value of J is ~ 1e-1, which appear to be a few orders of magnitude lower than expected: the extremes are ~ 1e-1 and 1e+6
Strangely, Jfd has a similar singular spectrum.

However, sbrick_fdp.i is inconsistent with these results.  Indeed, Jfd should be the assembled version of Jmffd, so solving with Jfd should be no worse for R than solving with Jmffd.
The conjecture is that Jfd isn't what I think it is -- namely, it is NOT the columnwise-assembled version of Jmffd.  

Questions:
------------------
What exactly does [./Preconditioning] type = FDP [../] do in Moose?
Do these problems extend to PresetBC?  To SolidMechanics?



================================================================================================================================================================================================
brick: 
================================================================================================================================================================================================
Same as sbrick on the same mesh, except uniformly refined 2 times.
This tests whether the findings of sbrick test are mesh-size dependent. 

Cases: 
---------
Same as sbrick.
Note that brick_mf.i takes A LONG TIME to run, as this is a fairly large unpreconditioned problem.  Run it with optimization and, if possible, in parallel.  PETSc options have been adjusted for this case to help it converge.

Preliminary conclusions:
----------------------------------------
Same as in sbrick.   Note that the singular spectrum of J and Jfd has rather similar extermes: ~1e-1 and 1e+6.

Questions:
-----------------
Same as in sbrick and WHAT THE HELL IS GOING ON?

